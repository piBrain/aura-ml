import tensorflow as tf
from model.model import Seq2Seq
from tensorflow import estimator
from sys import argv
from pprint import pprint
from data_prep.data_hooks import ModelInputs
from tensorflow.contrib.learn import learn_runner, RunConfig, Experiment
from tensorflow.contrib.training import HParams
import json

TRAIN_GRAPH = tf.Graph()

with open('./hyperparameters.json', 'r') as f:
    HPARAMS = json.load(f)

def model_fn(features, labels, mode, params, config):
    model = Seq2Seq(
            params.batch_size, features[0], labels[0],
            params.input_vocab_size, params.output_vocab_size, params.num_units,
            mode
    )

    enc_out, enc_state = model.encode(params.num_units, params.num_layers, features[1])

    if mode == estimator.ModeKeys.TRAIN:
        t_out, _ = model.decode(params.num_units, labels[1], enc_state)
        spec = model.prepare_train(t_out, labels[1], labels[0], params.learning_rate)
    if mode == estimator.ModeKeys.PREDICT:
        _, sample_id = model.decode(params.num_units, labels[1])
        spec = model.prepare_predict(sample_id)
    return spec

def experiment_fn(run_config, hparams):
    input_fn_factory = ModelInputs(hparams.vocab_paths, hparams.batch_size)
    train_input_fn, train_input_hook = input_fn_factory.get_inputs(hparams.train_dataset_paths)
    eval_input_fn, eval_input_hook = input_fn_factory.get_inputs(hparams.eval_dataset_paths, mode=estimator.ModeKeys.EVAL)

    exp_estimator = get_estimator(run_config, hparams)
    run_config.replace(save_checkpoints_steps=hparams.min_eval_frequency)

    return Experiment(
        estimator=exp_estimator,
        train_input_fn=train_input_fn,
        eval_input_fn=eval_input_fn,
        train_steps=hparams.num_steps,
        min_eval_frequency=hparams.min_eval_frequency,
        train_monitors=[train_input_hook],
        eval_hooks=[eval_input_hook],
        eval_steps=None
    )

def get_estimator(run_config, hparams):
    return estimator.Estimator(
        model_fn=model_fn,
        params=hparams,
        config=run_config,
    )

def print_predictions(predictions):
    for pred in predictions:
        pprint(pred)

def main():
    hparams = HParams(**HPARAMS)
    run_config = RunConfig(model_dir='./save')

    if len(argv) < 2 or argv[1] == 'train':
        learn_runner.run(
            experiment_fn=experiment_fn,
            run_config=run_config,
            schedule="train_and_evaluate",
            hparams=hparams,
        )
    elif argv[1] == 'predict':
        pass
    else:
        print('Unknown Operation.')

if __name__ == '__main__':
    main()
